name: KinD OIDC

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

  workflow_dispatch: {}

defaults:
  run:
    shell: bash
    working-directory: ./src/github.com/mattmoor/kind-oidc

jobs:

  kind-oidc:
    name: KinD OIDC
    runs-on: ubuntu-latest

    env:
      # https://github.com/google/go-containerregistry/pull/125 allows insecure registry for
      # '*.local' hostnames. This works both for `ko` and our own tag-to-digest resolution logic,
      # thus allowing us to test without bypassing tag-to-digest resolution.
      REGISTRY_NAME: registry.local
      REGISTRY_PORT: 5000
      KO_DOCKER_REPO: registry.local:5000/knative

    steps:
    - name: Set up Go 1.17.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x

    - uses: imjasonh/setup-ko@v0.4

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        path: ./src/github.com/mattmoor/kind-oidc

    - name: Install KinD
      run: |
        # Disable swap otherwise memory enforcement doesn't work
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
        sudo swapoff -a
        sudo rm -f /swapfile

        # Use in-memory storage to avoid etcd server timeouts.
        # https://kubernetes.slack.com/archives/CEKK1KTN2/p1615134111016300
        # https://github.com/kubernetes-sigs/kind/issues/845
        sudo mkdir -p /tmp/etcd
        sudo mount -t tmpfs tmpfs /tmp/etcd

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Configure KinD Cluster
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster

        # Configure registry for KinD.
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."$REGISTRY_NAME:$REGISTRY_PORT"]
            endpoint = ["http://$REGISTRY_NAME:$REGISTRY_PORT"]

        # This is needed in order to support projected volumes with service account tokens.
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
        kubeadmConfigPatches:
          - |
            apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
                "service-account-jwks-uri": "kubernetes.default.svc/openid/v1/jwks"
                "service-account-key-file": "/etc/kubernetes/pki/sa.pub"
            networking:
              dnsDomain: "cluster.local"

        nodes:
        - role: control-plane
          image: kindest/node:v1.22.0@sha256:f97edf7f7ed53c57762b24f90a34fad101386c5bd4d93baeb45449557148c717
          extraMounts:
          - containerPath: /var/lib/etcd
            hostPath: /tmp/etcd
        - role: worker
          image: kindest/node:v1.22.0@sha256:f97edf7f7ed53c57762b24f90a34fad101386c5bd4d93baeb45449557148c717
        EOF

    - name: Create KinD Cluster
      run: |
        kind create cluster --config kind.yaml

    - name: Setup local registry
      run: |
        # Run a registry.
        docker run -d --restart=always \
          -p $REGISTRY_PORT:$REGISTRY_PORT --name $REGISTRY_NAME registry:2

        # Connect the registry to the KinD network.
        docker network connect "kind" $REGISTRY_NAME

        # Make the $REGISTRY_NAME -> 127.0.0.1, to tell `ko` to publish to
        # local reigstry, even when pushing $REGISTRY_NAME:$REGISTRY_PORT/some/image
        sudo echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

    - name: Verify OIDC is configured
      run: |
        ko apply -Bf config/

        kubectl wait --for=condition=Complete --timeout=90s job/check-oidc

    - name: Dump job output
      if: ${{ failure() }}
      run: |
        kubectl describe job check-oidc
      
        for ns in default; do
          kubectl get pods -n${ns}
          echo '::group:: describe'
          kubectl describe pods -n${ns}
          echo '::endgroup::'
          for x in $(kubectl get pods -n${ns} -oname); do
            echo "::group:: describe $x"
            kubectl describe -n${ns} $x
            echo '::endgroup::'
            echo "::group:: $x logs"
            kubectl logs -n${ns} $x --all-containers
            echo '::endgroup::'
          done
        done
